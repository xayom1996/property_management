import 'dart:async';
import 'dart:math';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';
import 'package:property_management/account/pages/successfull_page.dart';
import 'package:property_management/app/bloc/app_bloc.dart';
import 'package:property_management/app/cubit/adding/adding_state.dart';
import 'package:property_management/app/theme/styles.dart';
import 'package:property_management/app/widgets/box_icon.dart';
import 'package:property_management/app/widgets/custom_alert_dialog.dart';
import 'package:property_management/app/widgets/expenses.dart';
import 'package:property_management/characteristics/cubit/characteristics_cubit.dart';
import 'package:property_management/characteristics/models/characteristics.dart';
import 'package:property_management/exploitation/cubit/add_expense_cubit.dart';
import 'package:property_management/exploitation/cubit/exploitation_cubit.dart';
import 'package:property_management/exploitation/widgets/exploitation_container.dart';
import 'package:property_management/objects/bloc/objects_bloc.dart';
import 'package:property_management/objects/models/place.dart';
import 'package:sticky_headers/sticky_headers.dart';

class ExploitationMonths extends StatefulWidget {
  ExploitationMonths({Key? key}) : super(key: key);

  @override
  State<ExploitationMonths> createState() => _ExploitationMonthsState();
}

class _ExploitationMonthsState extends State<ExploitationMonths> {
  PageController pageController = PageController();
  List<Map<String, Characteristics>> items = [];
  late StreamSubscription _objectsSubscription;
  late StreamSubscription _exploitationSubscription;

  @override
  void initState() {
    getItems(context);
    _objectsSubscription = context.read<ObjectsBloc>().stream.listen(
            (state){
              if (state.status == ObjectsStatus.fetched){
                getItems(context);
              }
            });
    _exploitationSubscription = context.read<ExploitationCubit>().stream.listen(
            (state){
              getItems(context);
            });
    super.initState();
  }
  @override
  void dispose() {
    pageController.dispose();
    _objectsSubscription.cancel();
    _exploitationSubscription.cancel();
    super.dispose();
  }

  void getItems(BuildContext context) {
    if (context.read<ObjectsBloc>().state.places.isEmpty){
      items = [];
      return;
    }
    Place place = context.read<ObjectsBloc>().state.places[context.read<ExploitationCubit>().state.selectedPlaceId];
    items = List.from(place.expensesItems ?? []);
    items.sort((a, b) {
      DateTime dateA = DateFormat('MM.yyyy').parse(a['Месяц, Год']!.getFullValue());
      DateTime dateB = DateFormat('MM.yyyy').parse(b['Месяц, Год']!.getFullValue());
      return dateA.compareTo(dateB);
    });
    // Map<String, Characteristics> emptyExpense = {for (var item in context.read<AppBloc>().state.expensesItems) item.title : item};
    items.add({for (var item in context.read<AppBloc>().state.expensesItems) item.title : item});
    items.insert(0, {for (var item in context.read<AppBloc>().state.expensesItems) item.title : item});

    WidgetsBinding.instance!.addPostFrameCallback((_) {
      if (pageController.hasClients) {
        int initialPage = 0;
        for (var i = 0; i < items.length; i++) {
          if (items[i]['Месяц, Год']!.getFullValue() == DateFormat('MM.yyyy').format(DateTime.now())){
            initialPage = ((i + 1) / 3).ceil() - 1;
            break;
          }
        }
        pageController.jumpToPage(initialPage);
      }
    });
  }

  // @override
  // void didChangeDependencies() {
  //   WidgetsBinding.instance!.addPostFrameCallback((_) {
  //     if (pageController.hasClients) {
  //       int initialPage = 0;
  //       for (var i = 0; i < items.length; i++) {
  //         if (items[i]['Месяц, Год']!.getFullValue() == DateFormat('MM.yyyy').format(DateTime.now())){
  //           initialPage = ((i + 1) / 3).ceil() - 1;
  //           break;
  //         }
  //       }
  //       pageController.jumpToPage(initialPage);
  //     }
  //   });
  //
  //   super.didChangeDependencies();
  // }

  @override
  Widget build(BuildContext context) {
    return BlocConsumer<AddExpenseCubit, AddingState>(
        listener: (context, addingState) {
          if (addingState.status == StateStatus.success) {
            var user = context.read<AppBloc>().state.user;
            var owners = context.read<AppBloc>().state.owners;
            context.read<ObjectsBloc>().add(ObjectsGetEvent(user: user, owners: owners));

            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) =>
                  SuccessfullPage(
                    information: Text(
                      'Эксплуатация успешно добавлена',
                      textAlign: TextAlign.center,
                      style: body.copyWith(
                          color: Color(0xff151515)
                      ),
                    ),
                  )),
            );
          }

          if (addingState.status == StateStatus.error) {
            showDialog(
                context: context,
                builder: (context) => CustomAlertDialog(
                  title: addingState.errorMessage,
                  firstButtonTitle: 'Ок',
                  secondButtonTitle: null,
                )
            );
          }
        },
        builder: (context, state) {
          int count = (items.length / 3).ceil();
          return PageView(
            controller: pageController,
            children: [
              for (int i = 0; i < count; i++)
                SingleChildScrollView(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    mainAxisAlignment: MainAxisAlignment.start,
                    children: [
                      Padding(
                        padding: EdgeInsets.only(bottom: 12, left: 24, right: 24, top: 24),
                        child: Container(
                          height: 32,
                          child: Row(
                            children: [
                              for (var item in items.sublist(i * 3, min(items.length, (i + 1) * 3)))
                                Expanded(
                                  child: Padding(
                                    padding: EdgeInsets.only(right: 9),
                                    child: Container(
                                      child: Center(
                                        child: item['Месяц, Год']!.getMonthAndYear().isNotEmpty
                                            ? Text(
                                                item['Месяц, Год']!.getMonthAndYear(),
                                                style: body.copyWith(
                                                  fontSize: 14
                                                ),
                                                textAlign: TextAlign.center,
                                              )
                                            : BoxIcon(
                                                iconPath: 'assets/icons/plus.svg',
                                                iconColor: Colors.black,
                                                backgroundColor: Colors.white,
                                                size: 34,
                                                iconSize: 15,
                                                onTap: () {
                                                  DateTime newDate = DateTime.now();
                                                  if (item == items.first) {
                                                    DateTime date = DateFormat('MM.yyyy').parse(items[1]['Месяц, Год']!.getFullValue());
                                                    newDate = DateTime(date.year, date.month - 1, date.day);
                                                  }
                                                  if (item == items.last) {
                                                    DateTime date = DateFormat('MM.yyyy').parse(items[items.length - 2]['Месяц, Год']!.getFullValue());
                                                    newDate = DateTime(date.year, date.month + 1, date.day);
                                                  }
                                                  context.read<AddExpenseCubit>().getItems(context.read<AppBloc>().state.expensesItems);
                                                  context.read<AddExpenseCubit>().changeItemValue(0, DateFormat('MM.yyyy').format(newDate), '');
                                                  String docId = context.read<ObjectsBloc>().state.places[context.read<ExploitationCubit>().state.selectedPlaceId].id;
                                                  context.read<AddExpenseCubit>().add(docId);
                                                },
                                              )
                                      ),
                                    ),
                                  ),
                                ),
                              for (var index = 0; index < 3 - items.sublist(i * 3, min(items.length, (i + 1) * 3)).length; index++)
                                Expanded(
                                  child: Padding(
                                    padding: const EdgeInsets.only(right: 9),
                                    child: Container()
                                  ),
                                ),
                            ],
                          ),
                        ),
                      ),
                      for (var item in state.items.sublist(1))
                        Padding(
                          padding: const EdgeInsets.only(top: 16, bottom:16, left: 24, right: 24 - 9),
                          child: ExploitationContainer(
                            title: item.title,
                            expenses: items.sublist(i * 3, min(items.length, (i + 1) * 3)),
                            // height: 32,
                            // isLastElementBold: true,
                          ),
                        )
                    ],
                  ),
                ),
            ],
          );
          return Stack(
            children: [
              SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisAlignment: MainAxisAlignment.start,
                  children: [
                    Padding(
                      padding: EdgeInsets.only(bottom: 12, left: 24, right: 24, top: 24),
                      child: Container(
                        height: 32,
                        child: ListView.builder(
                          shrinkWrap: true,
                          scrollDirection: Axis.horizontal,
                          itemCount: items.length,
                          itemBuilder: (BuildContext context, int index) => Container(
                            width: 128,
                            child: Padding(
                              padding: EdgeInsets.only(right: 9),
                              child: Center(
                                child: Text(
                                  items[index]['Месяц, Год']!.getMonthAndYear(),
                                  style: body,
                                  textAlign: TextAlign.center,
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                    for (var item in state.items.sublist(1))
                      Padding(
                        padding: const EdgeInsets.only(top: 16, bottom:16, left: 24, right: 24 - 9),
                        child: ExpensesContainer(
                          title: item.title,
                          expenses: items.map((e) => e[item.title]!.getFullValue()).toList(),
                          width: 128,
                          // height: 32,
                          // isLastElementBold: true,
                        ),
                      )
                  ],
                ),
              ),
            ],
          );
        }
    );
  }
}