import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';
import 'package:property_management/app/cubit/adding/adding_state.dart';
import 'package:property_management/app/theme/styles.dart';
import 'package:property_management/app/widgets/expenses.dart';
import 'package:property_management/characteristics/models/characteristics.dart';
import 'package:property_management/exploitation/cubit/add_expense_cubit.dart';
import 'package:property_management/exploitation/cubit/exploitation_cubit.dart';
import 'package:property_management/objects/bloc/objects_bloc.dart';
import 'package:property_management/objects/models/place.dart';

class ExploitationMonths extends StatelessWidget {
  ExploitationMonths({Key? key}) : super(key: key);

  List headerTitles = ['Январь', 'Февраль', 'Март'];

  List<Map> expensesItems = [
    {'title': 'Текущая арендная плата', 'expense': ['20 000 ₽', '125 000 000 ₽', '25 000 ₽']},
    {'title': 'Обеспечительный платёж', 'expense': ['10 000 ₽', '12 000 000 ₽', '13 000 ₽']},
    {'title': 'Налоги', 'expense': ['2 300 ₽', '2 000 ₽', '25 00 ₽']},
    {'title': 'Сумма Аренды от товарооборота', 'expense': ['20 000 ₽', '20 000 ₽', '20 000 ₽']},
    {'title': 'Фактический товарооборот', 'expense': ['20 000 ₽', '20 000 ₽', '20 000 ₽']},
    {'title': 'Дополнительные доходы', 'expense': ['20 000 ₽', '20 000 ₽', '20 000 ₽']},
    {'title': 'Расходы на управление', 'expense': ['20 000 ₽', '20 000 ₽', '20 000 ₽']},
    {'title': 'Ремонтные и другие затраты', 'expense': ['20 000 ₽', '20 000 ₽', '20 000 ₽']},
    {'title': 'Комментарий к «Ремонтные и другие затраты»', 'expense': [
      'Ремонт кухни и коридора. Покраска стен, замена напольного покрытия. Натяжной потолок.',
      'Ремонт кухни и коридора. Покраска стен, замена напольного покрытия. Натяжной потолок.',
      'Ремонт кухни и коридора. Покраска стен, замена напольного покрытия. Натяжной потолок.',
    ]},
    {'title': 'Банковское обслуживание', 'expense': ['20 000 ₽', '20 000 ₽', '20 000 ₽']},
    {'title': 'Счет за электроэнергию', 'expense': ['20 000 ₽', '20 000 ₽', '20 000 ₽']},
    {'title': 'Счет за эксплуатацию (от УК МКД)', 'expense': ['20 000 ₽', '20 000 ₽', '20 000 ₽']},
    {'title': 'Счет за водоснабжение и водоотведение', 'expense': ['20 000 ₽', '20 000 ₽', '20 000 ₽']},
    {'title': 'Показания по электричеству', 'expense': ['12', '23', '232']},
    {'title': 'Счет за отопление', 'expense': ['20 000 ₽', '20 000 ₽', '20 000 ₽']},
    {'title': 'Вывоз мусора', 'expense': ['20 000 ₽', '20 000 ₽', '20 000 ₽']},
    {'title': 'Услуги связи', 'expense': ['20 000 ₽', '20 000 ₽', '20 000 ₽']},
    {'title': 'Показания по ХВС', 'expense': ['12', '232', '232']},
    {'title': 'Показания по ГВС', 'expense': ['122', '133', '323']},
    {'title': 'Показания по отоплению', 'expense': ['133', '123', '322']},
    {'title': 'Пени Арендатору за просрочку оплаты КУ', 'expense': ['200 ₽', '200 ₽', '200 ₽']},
    {'title': 'Пени Арендатору за просрочку оплаты аренды', 'expense': ['200 ₽', '200 ₽', '100 ₽']},
  ];

  @override
  Widget build(BuildContext context) {
    Place place = context.read<ObjectsBloc>().state.places[context.read<ExploitationCubit>().state.selectedPlaceId];
    List<Map<String, Characteristics>> items = place.expensesItems ?? [];
    items.sort((a, b) {
      DateTime dateA = DateFormat('MM.yyyy').parse(a['Месяц, Год']!.getFullValue());
      DateTime dateB = DateFormat('MM.yyyy').parse(b['Месяц, Год']!.getFullValue());
      return dateA.compareTo(dateB);
    });

    return BlocBuilder<AddExpenseCubit, AddingState>(
        builder: (context, state) {
          return Stack(
            children: [
              SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisAlignment: MainAxisAlignment.start,
                  children: [
                    Padding(
                      padding: EdgeInsets.only(bottom: 12, left: 24, right: 24, top: 24),
                      child: Container(
                        height: 32,
                        child: ListView.builder(
                          shrinkWrap: true,
                          scrollDirection: Axis.horizontal,
                          itemCount: items.length,
                          itemBuilder: (BuildContext context, int index) => Container(
                            width: 128,
                            child: Padding(
                              padding: EdgeInsets.only(right: 9),
                              child: Center(
                                child: Text(
                                  items[index]['Месяц, Год']!.getMonthAndYear(),
                                  style: body,
                                  textAlign: TextAlign.center,
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                    for (var item in state.items.sublist(1))
                      Padding(
                        padding: const EdgeInsets.only(top: 16, bottom:16, left: 24, right: 24 - 9),
                        child: ExpensesContainer(
                          title: item.title,
                          expenses: items.map((e) => e[item.title]!.getFullValue()).toList(),
                          width: 128,
                          // height: 32,
                          // isLastElementBold: true,
                        ),
                      )
                  ],
                ),
              ),
            ],
          );
        }
    );
  }

}