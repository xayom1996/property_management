import 'dart:async';
import 'dart:math';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';
import 'package:property_management/account/pages/successfull_page.dart';
import 'package:property_management/app/bloc/app_bloc.dart';
import 'package:property_management/app/cubit/adding/adding_state.dart';
import 'package:property_management/app/theme/styles.dart';
import 'package:property_management/app/widgets/box_icon.dart';
import 'package:property_management/app/widgets/custom_alert_dialog.dart';
import 'package:property_management/app/widgets/expenses.dart';
import 'package:property_management/characteristics/cubit/characteristics_cubit.dart';
import 'package:property_management/characteristics/models/characteristics.dart';
import 'package:property_management/exploitation/cubit/add_expense_cubit.dart';
import 'package:property_management/exploitation/cubit/exploitation_cubit.dart';
import 'package:property_management/exploitation/widgets/exploitation_container.dart';
import 'package:property_management/objects/bloc/objects_bloc.dart';
import 'package:property_management/objects/models/place.dart';

class ExploitationMonths extends StatefulWidget {
  const ExploitationMonths({Key? key, required this.items, required this.pageController}) : super(key: key);
  final List<List<Characteristics>> items;
  final PageController pageController;

  @override
  State<ExploitationMonths> createState() => _ExploitationMonthsState();
}

class _ExploitationMonthsState extends State<ExploitationMonths> {
  // PageController pageController = PageController();
  // List<List<Characteristics>> items = [];
  late StreamSubscription _objectsSubscription;
  late StreamSubscription _exploitationSubscription;
  bool isLoading = false;
  // ScrollController scrollController = ScrollController();
  // final dataKey = new GlobalKey();

  @override
  void initState() {
    super.initState();
  }

  // @override
  // void didChangeDependencies() {
  //   WidgetsBinding.instance!.addPostFrameCallback((_) {
  //     if (pageController.hasClients) {
  //       int initialPage = 0;
  //       for (var i = 0; i < items.length; i++) {
  //         if (items[i][0].getFullValue() == DateFormat('MM.yyyy').format(DateTime.now())){
  //           initialPage = ((i + 1) / 3).ceil() - 1;
  //           break;
  //         }
  //       }
  //       pageController.jumpToPage(initialPage);
  //     }
  //   });
  //
  //   super.didChangeDependencies();
  // }

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<AddExpenseCubit, AddingState>(
        builder: (context, state) {
          int count = max(1, widget.items.length - 2);

          return Column(
            children: [
              Expanded(
                child: PageView(
                  controller: widget.pageController,
                  children: [
                    for (int i = 0; i < count; i++)
                      SingleChildScrollView(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          mainAxisAlignment: MainAxisAlignment.start,
                          children: [
                            for (var item in state.items.sublist(1))
                              Padding(
                                padding: const EdgeInsets.only(top: 16, bottom:16, left: 24, right: 24 - 9),
                                child: ExploitationContainer(
                                  title: item.title,
                                  index: state.items.lastIndexWhere((element) => element.title == item.title),
                                  expenses: widget.items.sublist(i, min(widget.items.length, i + 3)),
                                  // height: 32,
                                  // isLastElementBold: true,
                                ),
                              )
                          ],
                        ),
                      ),
                  ],
                ),
              ),
            ],
          );
        }
    );
  }
}