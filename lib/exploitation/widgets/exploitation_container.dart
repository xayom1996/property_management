import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:property_management/characteristics/models/characteristics.dart';
import 'package:property_management/exploitation/cubit/edit_expense_cubit.dart';
import 'package:property_management/exploitation/cubit/exploitation_cubit.dart';
import 'package:property_management/exploitation/pages/edit_exploitation_page.dart';
import 'package:property_management/exploitation/widgets/comment_bottom_sheet.dart';
import 'package:property_management/app/theme/styles.dart';
import 'package:property_management/objects/bloc/objects_bloc.dart';
import 'package:property_management/objects/models/place.dart';
import 'package:property_management/objects/pages/item_page.dart';
import 'package:provider/src/provider.dart';

class ExploitationContainer extends StatelessWidget {
  final String title;
  final List<Map<String, Characteristics>> expenses;
  const ExploitationContainer({Key? key, required this.title, required this.expenses}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: caption1.copyWith(
              color: Color(0xffA3A7AE)
          ),
        ),
        SizedBox(
          height: 11,
        ),
        Container(
          height: 54,
          child: Row(
            children: [
              for (var index = 0; index < expenses.length; index++)
                Expanded(
                  flex: 1,
                  child: GestureDetector(
                    onDoubleTap: () {
                      if (expenses[index]['Месяц, Год']!.getFullValue().isNotEmpty) {
                        Place place = context
                            .read<ObjectsBloc>()
                            .state
                            .places[context
                            .read<ExploitationCubit>()
                            .state
                            .selectedPlaceId];
                        context.read<EditExpenseCubit>().getItems(
                            expenses[index], place.id);
                        List<Map<String, Characteristics>> expensesItems = place
                            .expensesItems ?? [];
                        final monthIndex = expensesItems.indexWhere((element) =>
                        element['Месяц, Год']!.getFullValue() ==
                            expenses[index]['Месяц, Год']!.getFullValue());

                        Navigator.push(
                          context,
                          MaterialPageRoute(builder: (context) =>
                              EditExploitationPage(
                                monthIndex: monthIndex,
                              )),
                        );

                        Navigator.push(
                          context,
                          MaterialPageRoute(builder: (context) =>
                              ItemPage(
                                item: expenses[index][title]!,
                                onChange: (int id, String value,
                                    String documentUrl) {
                                  context.read<EditExpenseCubit>()
                                      .changeItemValue(id, value, documentUrl);
                                  // context.read<EditExpenseCubit>().edit(monthIndex);
                                },
                              )),
                        );
                      }
                    },
                    child: Container(
                      child: Padding(
                        padding: EdgeInsets.only(right: 9),
                        child: GestureDetector(
                          onTap: () {
                            if (title.contains('Комментарий'))
                              showModalBottomSheet(
                                  context: context,
                                  backgroundColor: Colors.transparent,
                                  builder: (context) {
                                    return CommentBottomSheet(
                                      comment: expenses[index][title]!.getFullValue(),
                                    );
                                  }
                              );
                          },
                          child: Container(
                            padding: EdgeInsets.symmetric(horizontal: title.contains('Комментарий') ? 8: 0),
                            decoration: BoxDecoration(
                                color: Color(0xffF5F5F5).withOpacity(0.6),
                                borderRadius: BorderRadius.all(Radius.circular(12))
                            ),
                            child: Center(
                              child: Text(
                                expenses[index][title]!.getFullValue() == '' ? '0' : expenses[index][title]!.getFullValue(),
                                textAlign: TextAlign.center,
                                maxLines: 2,
                                overflow: TextOverflow.ellipsis,
                                style: body.copyWith(
                                  color: Color(0xff151515),
                                  fontSize: 15,
                                  fontWeight: FontWeight.w400,
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
                for (var index = 0; index < 3 - expenses.length; index++)
                  Expanded(
                    child: Padding(
                        padding: const EdgeInsets.only(right: 9),
                        child: Container()
                    ),
                  ),
            ],
          ),
        ),
      ],
    );
  }

}