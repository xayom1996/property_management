import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/services.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:property_management/app/bloc/app_bloc.dart';
import 'package:property_management/characteristics/models/characteristics.dart';
import 'package:property_management/exploitation/cubit/add_expense_cubit.dart';
import 'package:property_management/exploitation/cubit/edit_expense_cubit.dart';
import 'package:property_management/exploitation/cubit/exploitation_cubit.dart';
import 'package:property_management/exploitation/pages/edit_exploitation_page.dart';
import 'package:property_management/exploitation/widgets/comment_bottom_sheet.dart';
import 'package:property_management/app/theme/styles.dart';
import 'package:property_management/objects/bloc/objects_bloc.dart';
import 'package:property_management/objects/models/place.dart';
import 'package:property_management/objects/pages/item_page.dart';
import 'package:provider/src/provider.dart';

class ExploitationContainer extends StatefulWidget {
  final String title;
  final List<Map<String, Characteristics>> expenses;
  const ExploitationContainer({Key? key, required this.title, required this.expenses}) : super(key: key);

  @override
  State<ExploitationContainer> createState() => _ExploitationContainerState();
}

class _ExploitationContainerState extends State<ExploitationContainer> {
  int editingIndex = -1;
  final FocusNode myFocusNode = FocusNode();
  final TextEditingController controller = TextEditingController();

  @override
  void initState() {
    super.initState();
  }

  void onSubmit(String value) {
    Place place = context
        .read<ObjectsBloc>()
        .state
        .places[context
        .read<ExploitationCubit>()
        .state
        .selectedPlaceId];
    int id = context.read<AddExpenseCubit>().state.items.indexWhere(
            (element) => element.title == widget.title);
    context.read<EditExpenseCubit>().getItems(
        widget.expenses[editingIndex], place.id);
    List<Map<String, Characteristics>> expensesItems = place
        .expensesItems ?? [];
    final monthIndex = expensesItems.indexWhere((element) =>
            element['Месяц, Год']!.getFullValue()
                == widget.expenses[editingIndex]['Месяц, Год']!.getFullValue());

    context.read<EditExpenseCubit>().changeItemValue(id, value, '');
    widget.expenses[editingIndex][widget.title]!.value = value;
    context.read<EditExpenseCubit>().edit(monthIndex);

    setState(() {
      editingIndex = -1;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          widget.title,
          style: caption1.copyWith(
              color: Color(0xffA3A7AE)
          ),
        ),
        SizedBox(
          height: 11,
        ),
        Container(
          height: 54,
          child: Row(
            children: [
              for (var index = 0; index < widget.expenses.length; index++)
                Expanded(
                  flex: 1,
                  child: GestureDetector(
                    onDoubleTap: () {
                      if (context.read<AppBloc>().state.user.isAdminOrManager()
                          && widget.expenses[index]['Месяц, Год']!.getFullValue().isNotEmpty && widget.title != 'Сумма Аренды от товарооборота') {
                        setState(() {
                          editingIndex = index;
                          controller.text = widget.expenses[index][widget.title]!.value ?? '0';
                          myFocusNode.requestFocus();
                        });
                      }
                    },
                    child: Container(
                      child: Padding(
                        padding: EdgeInsets.only(right: 9),
                        child: GestureDetector(
                          onTap: () {
                            if (widget.title.contains('Комментарий'))
                              showModalBottomSheet(
                                  context: context,
                                  backgroundColor: Colors.transparent,
                                  builder: (context) {
                                    return CommentBottomSheet(
                                      comment: widget.expenses[index][widget.title]!.getFullValue(),
                                    );
                                  }
                              );
                          },
                          child: Container(
                            padding: EdgeInsets.symmetric(horizontal: widget.title.contains('Комментарий') ? 8: 0),
                            decoration: BoxDecoration(
                                color: Color(0xffF5F5F5).withOpacity(0.6),
                                borderRadius: BorderRadius.all(Radius.circular(12))
                            ),
                            child: editingIndex != index
                                ? Center(
                                    child: Text(
                                      widget.expenses[index][widget.title]!.getFullValue() == '' ? '0' : widget.expenses[index][widget.title]!.getFullValue(),
                                      textAlign: TextAlign.center,
                                      maxLines: 2,
                                      overflow: TextOverflow.ellipsis,
                                      style: body.copyWith(
                                        color: Color(0xff151515),
                                        fontSize: 15,
                                        fontWeight: FontWeight.w400,
                                      ),
                                    ),
                                  )
                                : TextField(
                                    focusNode: myFocusNode,
                                    controller: controller,
                                    style: body.copyWith(
                                      color: Color(0xff151515),
                                      fontSize: 15,
                                      fontWeight: FontWeight.w400,
                                    ),
                                    keyboardType: widget.expenses[index][widget.title]!.type != 'Текст'
                                        ? TextInputType.numberWithOptions(decimal: true, signed: true)
                                        : null,
                                    inputFormatters: widget.expenses[index][widget.title]!.type != 'Текст'
                                        ? [FilteringTextInputFormatter.deny(RegExp(r"\s\b|\b\s"))]
                                        : [],
                                    onSubmitted: onSubmit,
                                  ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
                for (var index = 0; index < 3 - widget.expenses.length; index++)
                  Expanded(
                    child: Padding(
                        padding: const EdgeInsets.only(right: 9),
                        child: Container()
                    ),
                  ),
            ],
          ),
        ),
      ],
    );
  }
}