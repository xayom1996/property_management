import 'dart:async';
import 'dart:math';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:intl/intl.dart';
import 'package:property_management/app/cubit/adding/adding_state.dart';
import 'package:property_management/app/widgets/box_icon.dart';
import 'package:property_management/characteristics/models/characteristics.dart';
import 'package:property_management/exploitation/cubit/add_expense_cubit.dart';
import 'package:property_management/exploitation/cubit/exploitation_cubit.dart';
import 'package:property_management/exploitation/widgets/exploitation_container.dart';
import 'package:property_management/objects/bloc/objects_bloc.dart';
import 'package:property_management/objects/models/place.dart';
import 'package:property_management/objects/widgets/object_card.dart';
import 'package:property_management/objects/widgets/object_skeleton.dart';
import 'package:property_management/app/theme/colors.dart';
import 'package:property_management/app/theme/styles.dart';
import 'package:property_management/app/utils/utils.dart';
import 'package:property_management/app/widgets/expenses.dart';
import 'package:provider/src/provider.dart';

class _SliverAppBarDelegate extends SliverPersistentHeaderDelegate {
  _SliverAppBarDelegate({
    required this.minHeight,
    required this.maxHeight,
    required this.child,
  });

  final double minHeight;
  final double maxHeight;
  final Widget child;

  @override
  double get minExtent => minHeight;

  @override
  double get maxExtent => max(maxHeight, minHeight);

  @override
  Widget build(
      BuildContext context, double shrinkOffset, bool overlapsContent) {
    return new SizedBox.expand(child: child);
  }

  @override
  bool shouldRebuild(_SliverAppBarDelegate oldDelegate) {
    return maxHeight != oldDelegate.maxHeight ||
        minHeight != oldDelegate.minHeight ||
        child != oldDelegate.child;
  }
}

class SearchExploitationPage extends StatefulWidget {
  const SearchExploitationPage({Key? key}) : super(key: key);

  @override
  State<SearchExploitationPage> createState() => _SearchExploitationPageState();
}

class _SearchExploitationPageState extends State<SearchExploitationPage> {
  PageController pageController = PageController();
  List<List<Characteristics>> items = [];
  List<Characteristics> addingItems = [];
  bool isLoading = false;
  String searchText = '';
  bool hasItems = false;
  List<Map> searchedItems = [];
  final searchedController = TextEditingController();
  int initialPage = 0;

  @override
  void initState() {
    getItems(context);
    pageController.addListener(() {
      setState(() {
        initialPage = pageController.page!.round();
      });
    });
    super.initState();
  }

  void getItems(BuildContext context) {
    if (context.read<ObjectsBloc>().state.places.isEmpty){
      items = [];
      return;
    }
    addingItems = context.read<AddExpenseCubit>().state.items;
    Place place = context.read<ObjectsBloc>().state.places[context.read<ExploitationCubit>().state.selectedPlaceId];
    items = List.from(place.expensesItems ?? []);
    items.sort((a, b) {
      DateTime dateA = DateFormat('MM.yyyy').parse(a[0].getFullValue());
      DateTime dateB = DateFormat('MM.yyyy').parse(b[0].getFullValue());
      return dateA.compareTo(dateB);
    });
  }

  void changedSearchText(String text) {
    setState(() {
      searchText = text;
      isLoading = true;
      initialPage = 0;
    });

    WidgetsBinding.instance!.addPostFrameCallback((_) {
      if (pageController.hasClients) {
        for (var i = 0; i < items.length; i++) {
          if (items[i][0].getFullValue() == DateFormat('MM.yyyy').format(DateTime.now())){
            setState(() {
              initialPage = max(0, i - 1);
            });
            break;
          }
        }
        pageController.jumpToPage(initialPage);
      }
    });

    isLoading = false;
    for (var item in addingItems) {
      if (item.title.toLowerCase().contains(searchText.toLowerCase())
          && item.visible) {
        setState(() {
          hasItems = true;
        });
        return;
      }
    }
    setState(() {
      hasItems = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      color: kBackgroundColor,
      child: SafeArea(
        child: Scaffold(
          appBar: PreferredSize(
            preferredSize: Size.fromHeight(68),
            child: AppBar(
              automaticallyImplyLeading: false,
              elevation: 0.0,
              titleSpacing: 0,
              title: Container(
                padding: EdgeInsets.only(
                  left: horizontalPadding(context, 44),
                  top: 16,
                  bottom: 8,
                  // right: 32,
                ),
                child: TextField(
                  textInputAction: TextInputAction.search,
                  autofocus: true,
                  onTap: () {},
                  controller: searchedController,
                  onChanged: (text) {
                    changedSearchText(text);
                  },
                  style: const TextStyle(
                    color: Color(0xff151515),
                    fontWeight: FontWeight.w500,
                    fontSize: 16,
                  ),
                  decoration: InputDecoration(
                    filled: true,
                    fillColor: Color(0xffF5F7F9),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.all(
                          Radius.circular(15) //                 <--- border radius here
                      ),
                    ),
                    enabledBorder: OutlineInputBorder(
                      borderSide: new BorderSide(color: Color(0xffe9ecf1)),
                      borderRadius: BorderRadius.all(
                          Radius.circular(15) //                 <--- border radius here
                      ),
                    ),
                    // prefixIconConstraints: BoxConstraints(maxWidth: 32),
                    hintText: 'Название, значение',
                    hintStyle: body.copyWith(
                      color: Color(0xff3C3C43).withOpacity(0.6),
                    ),
                    prefixIcon: IconButton(
                      icon: Icon(
                        Icons.search,
                        size: 18,
                        color: Color(0xff3C3C43).withOpacity(0.6),
                      ),
                      onPressed: () {  },
                    ),
                    suffixIcon: IconButton(
                      icon: Icon(
                        Icons.close,
                        size: 18,
                        color: Color(0xff3C3C43).withOpacity(0.6),
                      ),
                      onPressed: () {
                        searchedController.text = '';
                        changedSearchText('');
                      },
                    ),
                    contentPadding: EdgeInsets.all(0),
                  ),
                ),
              ),
              actions: [
                Align(
                  alignment: Alignment.center,
                  child: Padding(
                    padding: EdgeInsets.only(
                      right: horizontalPadding(context, 44),
                      left: horizontalPadding(context, 24, portraitPadding: 16),
                    ),
                    child: GestureDetector(
                      onTap: () {
                        Navigator.of(context).pop();
                      },
                      child: Text(
                        'Отмена',
                        style: body.copyWith(
                            color: Color(0xff5589F1)
                        ),
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
          body: searchText == '' || !hasItems
              ? CustomScrollView(
                 slivers: [
                   SliverFillRemaining(
                   hasScrollBody: false,
                    child: Column(
                        crossAxisAlignment: CrossAxisAlignment.center,
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          SvgPicture.asset(
                            'assets/icons/search.svg',
                            color: Color(0xffE9ECEE),
                            height: 72,
                          ),
                          Padding(
                            padding: EdgeInsets.symmetric(vertical: 24, horizontal: horizontalPadding(context, 44)),
                            child: Text(
                              'Ничего не найдено, попробуйте изменить запрос',
                              textAlign: TextAlign.center,
                              style: body.copyWith(
                                color: Color(0xffC7C9CC),
                              ),
                            ),
                          )
                        ],
                      ),
                  ),
                ],
              )
              : NestedScrollView(
                  headerSliverBuilder: (BuildContext context, bool innerBoxIsScrolled) {
                    return <Widget>[
                      SliverPersistentHeader(
                        pinned: true,
                        delegate: _SliverAppBarDelegate(
                          minHeight: 68,
                          maxHeight: 68,
                          child: Container(
                            color: kBackgroundColor,
                            child: Padding(
                              padding: EdgeInsets.only(bottom: 12, left: 24, right: 24, top: 24),
                              child: Container(
                                height: 32,
                                child: Row(
                                  children: [
                                    for (var item in items.sublist(initialPage, min(items.length, initialPage + 3)))
                                      Expanded(
                                        child: Padding(
                                          padding: EdgeInsets.only(right: 9),
                                          child: Container(
                                            child: Center(
                                                child: Text(
                                                  item[0].getMonthAndYear(),
                                                  style: body.copyWith(
                                                      fontSize: 14
                                                  ),
                                                  textAlign: TextAlign.center,
                                                )
                                            ),
                                          ),
                                        ),
                                      ),
                                    if (items.length < 3)
                                      for (var index = 0; index < 3 - items.length; index++)
                                        Expanded(
                                          child: Padding(
                                              padding: const EdgeInsets.only(right: 9),
                                              child: Container()
                                          ),
                                        ),
                                  ],
                                ),
                              ),
                            ),
                          ),
                        ),
                      )
                    ];
                  },
                  body: BlocBuilder<AddExpenseCubit, AddingState>(
                      builder: (context, state) {
                        int count = max(1, items.length - 2);

                        return PageView(
                          controller: pageController,
                          children: [
                            for (int i = 0; i < count; i++)
                              SingleChildScrollView(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  mainAxisAlignment: MainAxisAlignment.start,
                                  children: [
                                    for (var item in addingItems.sublist(1))
                                      if (item.title.toLowerCase().contains(searchText.toLowerCase())
                                          && item.visible)
                                        Padding(
                                          padding: const EdgeInsets.only(top: 16, bottom:16, left: 24, right: 24 - 9),
                                          child: ExploitationContainer(
                                            title: item.title,
                                            index: state.items.lastIndexWhere((element) => element.title == item.title),
                                            expenses: items.sublist(i, min(items.length, i + 3)),
                                            // height: 32,
                                            // isLastElementBold: true,
                                          ),
                                        )
                                  ],
                                ),
                              ),
                          ],
                        );
                      }
                  )
              )
        ),
      ),
    );
  }
}