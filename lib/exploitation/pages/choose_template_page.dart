import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:property_management/characteristics/models/characteristics.dart';
import 'package:property_management/exploitation/cubit/add_expense_cubit.dart';
import 'package:property_management/exploitation/cubit/edit_expense_cubit.dart';
import 'package:property_management/exploitation/cubit/exploitation_cubit.dart';
import 'package:property_management/exploitation/pages/create_exploitation_page.dart';
import 'package:property_management/exploitation/pages/edit_exploitation_page.dart';
import 'package:property_management/objects/bloc/objects_bloc.dart';
import 'package:property_management/objects/models/place.dart';
import 'package:property_management/app/theme/colors.dart';
import 'package:property_management/app/theme/styles.dart';
import 'package:property_management/app/utils/utils.dart';
import 'package:property_management/app/widgets/box_icon.dart';
import 'package:property_management/app/widgets/container_for_transition.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class ChooseTemplatePage extends StatelessWidget {
  final String action;
  const ChooseTemplatePage({Key? key, this.action = 'add'}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    Place place = context.read<ObjectsBloc>().state.places[context.read<ExploitationCubit>().state.selectedPlaceId];
    List<Map<String, Characteristics>> items = place.expensesItems ?? [];
    items.sort((a, b) {
      DateTime dateA = DateFormat('MM.yyyy').parse(a['Месяц, Год']!.getFullValue());
      DateTime dateB = DateFormat('MM.yyyy').parse(b['Месяц, Год']!.getFullValue());
      return dateA.compareTo(dateB);
    });

    return Scaffold(
      backgroundColor: kBackgroundColor,
      body: CustomScrollView(
        slivers: [
          SliverAppBar(
              centerTitle: true,
              elevation: 0,
              automaticallyImplyLeading: false,
              title: Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.start,
                children: [
                  Spacer(),
                  BoxIcon(
                    iconPath: 'assets/icons/clear.svg',
                    iconColor: Colors.black,
                    backgroundColor: Colors.white,
                    onTap: () {
                      Navigator.pop(context);
                    },
                  ),
                ],
              ),
              expandedHeight: 70,
              toolbarHeight: 70,
              collapsedHeight: 70,
              pinned: true,
              backgroundColor: kBackgroundColor,
              flexibleSpace: LayoutBuilder(builder: (BuildContext context, BoxConstraints constraints) {
                return FlexibleSpaceBar(
                  centerTitle: true,
                  titlePadding: EdgeInsets.all(24),
                  title: Text(
                    action == 'edit'
                        ? 'Выберите месяц'
                        : 'Выберите шаблон',
                    style: body,
                  ),
                );
              })
          ),
          SliverFillRemaining(
            hasScrollBody: false,
            child: Padding(
              padding: EdgeInsets.symmetric(horizontal: horizontalPadding(context, 44), vertical: 16),
              child: Column(
                children: [
                  for (var item in items)
                    ContainerForTransition(
                      title: item['Месяц, Год']!.getMonthAndYear(),
                      onTap: () {
                        Navigator.pop(context);
                        if (action == 'edit'){
                          /// Change EditExpenseCubit State
                          Place place = context.read<ObjectsBloc>().state.places[context.read<ExploitationCubit>().state.selectedPlaceId];
                          context.read<EditExpenseCubit>().getItems(item, place.id);
                          List<Map<String, Characteristics>> expensesItems = place.expensesItems ?? [];
                          final monthIndex = expensesItems.indexWhere((element) => element.hashCode == item.hashCode);

                          Navigator.push(
                            context,
                            MaterialPageRoute(builder: (context) =>
                                EditExploitationPage(
                                    monthIndex: monthIndex,
                                )),
                          );
                        }else {
                          List<Characteristics> objectItems = List<Characteristics>.from(item.values.map((item) => item));
                          objectItems.sort((a, b) => a.id.compareTo(b.id));
                          context.read<AddExpenseCubit>().getItems(objectItems);
                          Navigator.push(
                            context,
                            MaterialPageRoute(builder: (context) =>
                                CreateExploitationPage()),
                          );
                        }
                      },
                    ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

}