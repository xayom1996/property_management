import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:intl/intl.dart';
import 'package:property_management/account/pages/successfull_page.dart';
import 'package:property_management/app/bloc/app_bloc.dart';
import 'package:property_management/app/cubit/adding/adding_state.dart';
import 'package:property_management/app/widgets/custom_alert_dialog.dart';
import 'package:property_management/characteristics/cubit/characteristics_cubit.dart';
import 'package:property_management/characteristics/models/characteristics.dart';
import 'package:property_management/characteristics/widgets/document_page.dart';
import 'package:property_management/exploitation/cubit/add_expense_cubit.dart';
import 'package:property_management/exploitation/cubit/exploitation_cubit.dart';
import 'package:property_management/objects/bloc/objects_bloc.dart';
import 'package:property_management/app/theme/box_ui.dart';
import 'package:property_management/app/theme/colors.dart';
import 'package:property_management/app/theme/styles.dart';
import 'package:property_management/app/utils/utils.dart';
import 'package:property_management/app/widgets/box_icon.dart';
import 'package:property_management/objects/models/place.dart';
import 'package:property_management/objects/pages/item_page.dart';

class CreateExploitationPage extends StatelessWidget {
  CreateExploitationPage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return BlocConsumer<AddExpenseCubit, AddingState>(
        listener: (context, state) {
          if (state.status == StateStatus.success) {
            // var user = context.read<AppBloc>().state.user;
            // var owners = context.read<AppBloc>().state.owners;
            // context.read<ObjectsBloc>().add(ObjectsGetEvent(user: user, owners: owners));

            Navigator.pop(context);
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) =>
                  SuccessfullPage(
                    information: Text(
                      'Эксплуатация успешно добавлена',
                      textAlign: TextAlign.center,
                      style: body.copyWith(
                          color: Color(0xff151515)
                      ),
                    ),
                  )),
            );
          }

          if (state.status == StateStatus.error) {
            showDialog(
                context: context,
                builder: (context) => CustomAlertDialog(
                  title: state.errorMessage,
                  firstButtonTitle: 'Ок',
                  secondButtonTitle: null,
                )
            );
          }
        },
        builder: (context, state) {
          return Scaffold(
            backgroundColor: kBackgroundColor,
            appBar: AppBar(
              centerTitle: true,
              leading: null,
              // automaticallyImplyLeading: false,
              title: Row(
                crossAxisAlignment: CrossAxisAlignment.center,
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Spacer(),
                  Text(
                    'Эксплуатация${state.addItems[0].getFullValue().isNotEmpty ? ' за ${state.addItems[0].getMonthAndYear()}' : ''}',
                    style: body,
                  ),
                  Spacer(),
                  GestureDetector(
                    onTap: () {
                      Navigator.pop(context);
                    },
                    child: BoxIcon(
                      iconPath: 'assets/icons/clear.svg',
                      iconColor: Colors.black,
                      backgroundColor: Colors.white,
                    ),
                  ),
                ],
              ),
            ),
            body: state.status == StateStatus.loading
                ? const Center(
                    child: CircularProgressIndicator(),
                  )
                : Stack(
                    children: [
                      Container(
                        padding: EdgeInsets.symmetric(horizontal: horizontalPadding(context, 44), vertical: 16),
                        child: SingleChildScrollView(
                          child: Column(
                            children: [
                              for (var item in state.addItems)
                                if (context.read<AddExpenseCubit>().showInCreating(item)
                                    && item.visible)
                                  BoxInputField(
                                    controller: TextEditingController(text: item.getFullValue()),
                                    placeholder: item.placeholder ?? '',
                                    title: item.title,
                                    additionalInfo: item.additionalInfo,
                                    enabled: false,
                                    onTap: () {
                                      if (context.read<AddExpenseCubit>().showInCreating(item)) {
                                        Navigator.push(
                                          context,
                                          MaterialPageRoute(builder: (context) => ItemPage(
                                            item: item,
                                            onChange: (int id, String value, String documentUrl) {
                                              context.read<AddExpenseCubit>().changeItemValue(id, value, documentUrl);
                                            },
                                          )),
                                        );
                                      }
                                    },
                                    trailing: item.documentUrl != null && item.documentUrl!.isNotEmpty
                                        ? BoxIcon(
                                      iconPath: 'assets/icons/document.svg',
                                      iconColor: Color(0xff5589F1),
                                      backgroundColor: Colors.white,
                                      onTap: () {
                                        Navigator.push(
                                          context,
                                          MaterialPageRoute(builder: (context) => DocumentPage(
                                            documentUrl: item.documentUrl!,
                                          )),
                                        );
                                      },
                                    )
                                        : const Icon(
                                      Icons.arrow_forward_ios,
                                      size: 14,
                                      color: Color(0xff5589F1),
                                    ),
                                    // isError: isError,
                                  ),
                              SizedBox(
                                height: 60,
                              ),
                            ],
                          ),
                        ),
                      ),
                      if (state.status == StateStatus.valid)
                        Positioned(
                          bottom: 24,
                          child: Padding(
                            padding: EdgeInsets.symmetric(horizontal: horizontalPadding(context, 0.25.sw), vertical: 16),
                            child: SizedBox(
                              width: 1.sw - horizontalPadding(context, 0.25.sw) * 2,
                              child: BoxButton(
                                title: 'Создать',
                                onTap: (){
                                  Place place = context.read<ObjectsBloc>().state.places[context.read<ExploitationCubit>().state.selectedPlaceId];
                                  String docId = place.id;
                                  context.read<AddExpenseCubit>().add(docId, context.read<AppBloc>().state.owners[place.objectItems[3].value]['expense_characteristics']);
                                },
                              ),
                            ),
                          ),
                        ),
                    ],
                  ),
          );
        },
      );
  }

}