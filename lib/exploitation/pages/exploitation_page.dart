import 'dart:async';
import 'dart:math';

import 'package:carousel_slider/carousel_slider.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:intl/intl.dart';
import 'package:property_management/app/bloc/app_bloc.dart';
import 'package:property_management/app/bloc/app_state.dart';
import 'package:property_management/app/cubit/adding/adding_state.dart';
import 'package:property_management/app/cubit/editing/editing_state.dart';
import 'package:property_management/characteristics/models/characteristics.dart';
import 'package:property_management/exploitation/cubit/add_expense_cubit.dart';
import 'package:property_management/exploitation/cubit/edit_expense_cubit.dart';
import 'package:property_management/exploitation/cubit/exploitation_cubit.dart';
import 'package:property_management/exploitation/pages/choose_template_page.dart';
import 'package:property_management/exploitation/pages/create_exploitation_page.dart';
import 'package:property_management/exploitation/pages/expenses_articles_page.dart';
import 'package:property_management/exploitation/pages/search_exploitation_page.dart';
import 'package:property_management/exploitation/widgets/exploitation_bottom_sheet.dart';
import 'package:property_management/exploitation/widgets/exploitation_carousel_slider.dart';
import 'package:property_management/exploitation/widgets/exploitation_months.dart';
import 'package:property_management/objects/bloc/objects_bloc.dart';
import 'package:property_management/objects/models/place.dart';
import 'package:property_management/app/theme/colors.dart';
import 'package:property_management/app/theme/styles.dart';
import 'package:property_management/app/widgets/box_icon.dart';

class _SliverAppBarDelegate extends SliverPersistentHeaderDelegate {
  _SliverAppBarDelegate({
    required this.minHeight,
    required this.maxHeight,
    required this.child,
  });

  final double minHeight;
  final double maxHeight;
  final Widget child;

  @override
  double get minExtent => minHeight;

  @override
  double get maxExtent => max(maxHeight, minHeight);

  @override
  Widget build(
      BuildContext context, double shrinkOffset, bool overlapsContent) {
    return new SizedBox.expand(child: child);
  }

  @override
  bool shouldRebuild(_SliverAppBarDelegate oldDelegate) {
    return maxHeight != oldDelegate.maxHeight ||
        minHeight != oldDelegate.minHeight ||
        child != oldDelegate.child;
  }
}

class ExploitationPage extends StatefulWidget {
  const ExploitationPage({Key? key}) : super(key: key);

  @override
  State<ExploitationPage> createState() => _ExploitationPageState();
}

class _ExploitationPageState extends State<ExploitationPage> {
  bool isLoading = true;
  int currentIndexTab = 0;
  int initialPage = 0;

  PageController pageController = PageController();
  PageController headerController = PageController();
  List<List<Characteristics>> items = [];
  late StreamSubscription _objectsSubscription;
  late StreamSubscription _exploitationSubscription;

  int currentQuarterIndex = 0;

  final CarouselController carouselController = CarouselController();

  @override
  void initState() {
    getItems(context, true);
    _objectsSubscription = context.read<ObjectsBloc>().stream.listen(
            (state){
          if (state.status == ObjectsStatus.fetched){
            getItems(context, false);
          }
        });
    _exploitationSubscription = context.read<ExploitationCubit>().stream.listen(
            (state){
              getItems(context, true);
            });
    pageController.addListener(() {
      setState(() {
        initialPage = pageController.page!.round();
      });
    });
    // headerController.addListener(() {
    //   if (pageController.hasClients) {
    //     pageController.jumpToPage(headerController.page!.round());
    //   }
    // });
    super.initState();
    // Timer(const Duration(seconds: 4), () {
    //   setState(() {
    //     isLoading = false;
    //   });
    // });
  }

  void getItems(BuildContext context, bool isNewTab) {
    String newDate = '';
    setState(() {
      isLoading = true;
    });

    if (context.read<ObjectsBloc>().state.places.isEmpty){
      items = [];
      return;
    }

    Place place = context.read<ObjectsBloc>().state.places[context.read<ExploitationCubit>().state.selectedPlaceId];
    if (!isNewTab) {
      List list1 = [for (var item in items) item[0].getFullValue()];
      List list2 = [
        for (var item in place.expensesItems ?? []) item[0]
            .getFullValue()
      ];
      list2.removeWhere((item) => list1.contains(item));
      if(list2.isNotEmpty) {
        newDate = list2.first;
      }
    }
    items = List.from(place.expensesItems ?? []);
    items.sort((a, b) {
      DateTime dateA = DateFormat('MM.yyyy').parse(a[0].getFullValue());
      DateTime dateB = DateFormat('MM.yyyy').parse(b[0].getFullValue());
      return dateA.compareTo(dateB);
    });

    if (context.read<AppBloc>().state.user.isAdminOrManager()
        && items.isNotEmpty) {
      items.add([for (var item in context
          .read<AppBloc>()
          .state
          .owners[place.objectItems[3].value]['expense_characteristics']) item]);
      items.insert(0, [for (var item in context
          .read<AppBloc>()
          .state
          .owners[place.objectItems[3].value]['expense_characteristics']) item]);
    }

    if (isNewTab) {
      setState(() {
        initialPage = 0;
      });
      WidgetsBinding.instance!.addPostFrameCallback((_) {
        if (pageController.hasClients) {
          for (var i = 0; i < items.length; i++) {
            if (items[i][0].getFullValue() ==
                DateFormat('MM.yyyy').format(DateTime.now())) {

              setState(() {
                initialPage = max(0, i - 1);
              });
              break;
            }
          }
          pageController.jumpToPage(initialPage);
          // headerController.jumpToPage(initialPage);
        }
      });
    } else if (newDate != '') {
      WidgetsBinding.instance!.addPostFrameCallback((_) {
        if (pageController.hasClients) {
          for (var i = 0; i < items.length; i++) {
            if (items[i][0].getFullValue() == newDate) {
              setState(() {
                initialPage = max(0, i - 1);
              });
              break;
            }
          }
          pageController.jumpToPage(initialPage);
          // headerController.jumpToPage(initialPage);
        }
      });
    }
    setState(() {
      isLoading = false;
    });
  }

  @override
  void dispose() {
    pageController.dispose();
    headerController.dispose();
    _objectsSubscription.cancel();
    _exploitationSubscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: kBackgroundColor,
      body: BlocBuilder<ObjectsBloc, ObjectsState>(
        buildWhen: (previousState, state) {
          return previousState.places != state.places;
        },
        builder: (context, objectState) {
          return BlocBuilder<ExploitationCubit, ExploitationState>(
            buildWhen: (previousState, state) {
              return previousState.selectedPlaceId != state.selectedPlaceId ||
                  previousState.currentIndexTab != state.currentIndexTab;
            },
            builder: (context, state) {
              return objectState.places.isEmpty
                  ? Container()
                  : NestedScrollView(
                      headerSliverBuilder: (BuildContext context, bool innerBoxIsScrolled) {
                        return <Widget>[
                          SliverAppBar(
                              centerTitle: true,
                              elevation: 0,
                              forceElevated: innerBoxIsScrolled,
                              title: BlocBuilder<AppBloc, AppState>(
                                builder: (context, appState) {
                                  return Row(
                                    crossAxisAlignment: CrossAxisAlignment.center,
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: [
                                      BoxIcon(
                                        iconPath: 'assets/icons/search.svg',
                                        iconColor: Colors.black,
                                        backgroundColor: Colors.white,
                                        onTap: () {
                                          Navigator.push(
                                            context,
                                            PageRouteBuilder(
                                              pageBuilder: (context, animation1, animation2) => SearchExploitationPage(),
                                              transitionDuration: Duration.zero,
                                            ),
                                          );
                                        },
                                      ),
                                      Spacer(),
                                      if (appState.user.isAdminOrManager())
                                        BoxIcon(
                                          iconPath: 'assets/icons/plus.svg',
                                          iconColor: Colors.black,
                                          backgroundColor: Colors.white,
                                          onTap: () {
                                            if (objectState.places[context.read<ExploitationCubit>().state.selectedPlaceId].expensesItems != null) {
                                              showCupertinoModalPopup<void>(
                                                  context: context,
                                                  builder: (BuildContext context) =>
                                                      ExploitationBottomSheet(
                                                        onAdd: () {
                                                          Place place = objectState.places[context.read<ExploitationCubit>().state.selectedPlaceId];
                                                          /// Change AddExpenseCubit State
                                                          context.read<
                                                              AddExpenseCubit>()
                                                              .getItems(context
                                                              .read<AppBloc>()
                                                              .state
                                                              .owners[place.objectItems[3].value]['expense_characteristics']);

                                                          Navigator.pop(context);
                                                          Navigator.push(
                                                            context,
                                                            MaterialPageRoute(
                                                                builder: (context) =>
                                                                    CreateExploitationPage()),
                                                          );
                                                        },
                                                        onAddByTemplate: () {
                                                          Navigator.pop(context);
                                                          Navigator.push(
                                                            context,
                                                            MaterialPageRoute(
                                                                builder: (context) =>
                                                                    ChooseTemplatePage()),
                                                          );
                                                        },
                                                      )
                                              );
                                            } else {
                                              Place place = objectState.places[context.read<ExploitationCubit>().state.selectedPlaceId];
                                              context.read<
                                                  AddExpenseCubit>()
                                                  .getItems(context
                                                  .read<AppBloc>()
                                                  .state
                                                  .owners[place.objectItems[3].value]['expense_characteristics']);
                                              Navigator.push(
                                                  context,
                                                  MaterialPageRoute(
                                                  builder: (context) =>
                                                  CreateExploitationPage())
                                              );
                                            }
                                          },
                                        ),
                                      if (appState.user.isAdminOrManager() &&
                                          objectState.places[context.read<ExploitationCubit>().state.selectedPlaceId].expensesItems != null)
                                        SizedBox(width: 12,),
                                      if (appState.user.isAdminOrManager() &&
                                          objectState.places[context.read<ExploitationCubit>().state.selectedPlaceId].expensesItems != null)
                                        BoxIcon(
                                          iconPath: 'assets/icons/edit.svg',
                                          iconColor: Colors.black,
                                          backgroundColor: Colors.white,
                                          onTap: () {
                                            Navigator.push(
                                                context,
                                                MaterialPageRoute(builder: (context) => ChooseTemplatePage(
                                                    action: 'edit',
                                                ))
                                            );
                                          },
                                        ),
                                    ],
                                  );
                                }
                              ),
                              expandedHeight: 70,
                              toolbarHeight: 70,
                              collapsedHeight: 70,
                              pinned: true,
                              backgroundColor: kBackgroundColor,
                              flexibleSpace: LayoutBuilder(builder: (BuildContext context, BoxConstraints constraints) {
                                return FlexibleSpaceBar(
                                  centerTitle: true,
                                  titlePadding: EdgeInsets.symmetric(vertical: 24),
                                  title: Text('Эксплуатация',
                                    style: body,
                                  ),
                                );
                              })
                          ),
                          SliverPersistentHeader(
                            pinned: false,
                            delegate: _SliverAppBarDelegate(
                              minHeight: 83,
                              maxHeight: 83,
                              child: BlocBuilder<ObjectsBloc, ObjectsState>(
                                  buildWhen: (previousState, state) {
                                    return previousState.places != state.places;
                                  },
                                  builder: (context, state) {
                                    // context.read<ExploitationCubit>().changeSelectedPlaceId(0, state.places);
                                    return ExploitationCarouselSlider(
                                        key: const Key('exploitation_carousel'),
                                        places: state.places,
                                        carouselController: carouselController,
                                    );
                                  }
                              ),
                            ),
                          ),
                          SliverPersistentHeader(
                            pinned: false,
                            delegate: _SliverAppBarDelegate(
                              minHeight: 24,
                              maxHeight: 24,
                              child: Container(),
                            ),
                          ),
                          SliverPersistentHeader(
                            pinned: false,
                            delegate: _SliverAppBarDelegate(
                              minHeight: 24,
                              maxHeight: 24,
                              child: GestureDetector(
                                onTap: () {
                                  Navigator.push(
                                      context,
                                      MaterialPageRoute(builder: (context) => ExpensesArticlesPage(
                                        docId: objectState.places[context.read<ExploitationCubit>().state.selectedPlaceId].id,
                                      ))
                                  );
                                },
                                child: Center(
                                  child: Text(
                                    'Эксплуатационные статьи',
                                    style: body.copyWith(
                                      color: Color(0xff5589F1),
                                    ),
                                  ),
                                ),
                              ),
                            ),
                          ),
                          SliverPersistentHeader(
                            pinned: false,
                            delegate: _SliverAppBarDelegate(
                              minHeight: 16,
                              maxHeight: 16,
                              child: Container(),
                            ),
                          ),
                          if (objectState.places[state.selectedPlaceId].expensesItems != null && !isLoading)
                            SliverPersistentHeader(
                              pinned: true,
                              delegate: _SliverAppBarDelegate(
                                minHeight: 68,
                                maxHeight: 68,
                                child: Container(
                                  color: kBackgroundColor,
                                  child: Padding(
                                    padding: EdgeInsets.only(bottom: 12, left: 24, right: 24, top: 24),
                                    child: Container(
                                      height: 32,
                                      child: Row(
                                        children: [
                                          for (var item in items.sublist(initialPage, min(items.length, initialPage + 3)))
                                            Expanded(
                                              child: Padding(
                                                padding: EdgeInsets.only(right: 9),
                                                child: Container(
                                                  child: Center(
                                                      child: item[0].getMonthAndYear().isNotEmpty
                                                          ? Text(
                                                        item[0].getMonthAndYear(),
                                                        style: body.copyWith(
                                                            fontSize: 14
                                                        ),
                                                        textAlign: TextAlign.center,
                                                      )
                                                          : BoxIcon(
                                                        iconPath: 'assets/icons/plus.svg',
                                                        iconColor: Colors.black,
                                                        backgroundColor: Colors.white,
                                                        size: 34,
                                                        iconSize: 15,
                                                        onTap: () {
                                                          setState(() {
                                                            isLoading = true;
                                                          });
                                                          DateTime newDate = DateTime.now();
                                                          if (item == items.first) {
                                                            DateTime date = DateFormat('MM.yyyy').parse(items[1][0].getFullValue());
                                                            newDate = DateTime(date.year, date.month - 1, date.day);
                                                          }
                                                          if (item == items.last) {
                                                            DateTime date = DateFormat('MM.yyyy').parse(items[items.length - 2][0].getFullValue());
                                                            newDate = DateTime(date.year, date.month + 1, date.day);
                                                          }
                                                          Place place = context.read<ObjectsBloc>().state.places[context.read<ExploitationCubit>().state.selectedPlaceId];
                                                          context.read<AddExpenseCubit>().getItems(context.read<AppBloc>().state.owners[place.objectItems[3].value]['expense_characteristics']);
                                                          context.read<AddExpenseCubit>().changeItemValue(0, DateFormat('MM.yyyy').format(newDate), '');
                                                          String docId = place.id;
                                                          context.read<AddExpenseCubit>().add(docId, context.read<AppBloc>().state.owners[place.objectItems[3].value]['expense_characteristics']);
                                                        },
                                                      )
                                                  ),
                                                ),
                                              ),
                                            ),
                                          if (items.length < 3)
                                            for (var index = 0; index < 3 - items.length; index++)
                                              Expanded(
                                                child: Padding(
                                                    padding: const EdgeInsets.only(right: 9),
                                                    child: Container()
                                                ),
                                              ),
                                        ],
                                      ),
                                    ),
                                  ),
                                ),
                              ),
                            ),
                        ];
                      },
                      body: BlocListener<EditExpenseCubit, EditingState>(
                        listener: (context, state) {
                          if (state.status == StateStatus.success) {
                            context.read<ObjectsBloc>().add(const ObjectsUpdateEvent());
                          }
                        },
                        child: BlocConsumer<AddExpenseCubit, AddingState>(
                          listener: (context, addingState) {
                            if (addingState.status == StateStatus.success) {
                              context.read<ObjectsBloc>().add(const ObjectsUpdateEvent());
                            }
                          },
                          builder: (context, addingState) {
                            return isLoading
                                ? const Center(
                                    child: CircularProgressIndicator(),
                                  )
                                : objectState.places.isEmpty || objectState.places[state.selectedPlaceId].expensesItems!.isEmpty
                                  ? context.read<AppBloc>().state.user.isAdminOrManager()
                                    ? BlocBuilder<AddExpenseCubit, AddingState>(
                                      builder: (context, addingState) {
                                        return GestureDetector(
                                            onTap: () {
                                              setState(() {
                                                isLoading = true;
                                              });
                                              Place place = objectState.places[state.selectedPlaceId];
                                              context.read<AddExpenseCubit>().getItems(context.read<AppBloc>().state.owners[place.objectItems[3].value]['expense_characteristics']);
                                              context.read<AddExpenseCubit>().changeItemValue(0, DateFormat('MM.yyyy').format(DateTime.now()), '');
                                              String docId = place.id;
                                              context.read<AddExpenseCubit>().add(docId, context.read<AppBloc>().state.owners[place.objectItems[3].value]['expense_characteristics']);
                                            },
                                            child: Center(
                                              child: Row(
                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                mainAxisAlignment: MainAxisAlignment.center,
                                                children: [
                                                  SvgPicture.asset(
                                                    'assets/icons/plus.svg',
                                                    color: Color(0xff4B81EF),
                                                    height: 16,
                                                  ),
                                                  SizedBox(width: 10),
                                                  Text(
                                                    'Добавить ежемесячные статьи затрат',
                                                    textAlign: TextAlign.center,
                                                    style: title2.copyWith(
                                                        color: Color(0xff4B81EF),
                                                        fontSize: 14,
                                                        fontWeight: FontWeight.w400
                                                    ),
                                                  ),
                                                ],
                                              ),
                                            ),
                                          );
                                      }
                                    )
                                    : CustomScrollView(
                                        slivers: [
                                          SliverFillRemaining(
                                            hasScrollBody: false,
                                            child: Column(
                                              crossAxisAlignment: CrossAxisAlignment.center,
                                              mainAxisAlignment: MainAxisAlignment.center,
                                              children: [
                                                SvgPicture.asset(
                                                  'assets/icons/home_white.svg',
                                                  color: Color(0xffE9ECEE),
                                                  height: 80,
                                                ),
                                                SizedBox(
                                                  height: 32,
                                                ),
                                                Text(
                                                  'Данные не заполнены, обратитесь к вашему менеджеру',
                                                  textAlign: TextAlign.center,
                                                  style: body.copyWith(
                                                    color: Color(0xffC7C9CC),
                                                  ),
                                                ),
                                              ],
                                            ),
                                          ),
                                        ],
                                      )
                                  : ExploitationMonths(
                                      items: items,
                                      pageController: pageController,
                                    );
                          }
                        ),
                      ),
                          // : CustomScrollView(
                          //     slivers: [
                          //       SliverFillRemaining(
                          //         hasScrollBody: false,
                          //         // child: ExploitationMonths()
                          //         child: ExploitationMonths()
                          //       ),
                          //     ],
                          //   ),
                          // : ListView.builder(
                          //       itemCount: expensesItems.length,
                          //       itemBuilder: (BuildContext context, int index) {
                          //         return Padding(
                          //           padding: EdgeInsets.only(top: 16, bottom:16, left: 24, right: 24 - 9),
                          //           child: ExpensesContainer(
                          //             title: expensesItems[index]['title'],
                          //             expenses: expensesItems[index]['expense'],
                          //           ),
                          //         );
                          //       }
                          //   ),

                      // body: ListView.builder(
                      //     itemCount: expensesItems.length,
                      //     itemBuilder: (BuildContext context, int index) {
                      //       return Padding(
                      //         padding: EdgeInsets.only(top: 16, bottom:16, left: 24, right: 24 - 9),
                      //         child: ExpensesContainer(
                      //           title: expensesItems[index]['title'],
                      //           expenses: expensesItems[index]['expense'],
                      //         ),
                      //       );
                      //     }
                      // ),
                    );
            }
          );
        }
      ),
    );
  }
}