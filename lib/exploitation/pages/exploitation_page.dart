import 'dart:async';
import 'dart:math';

import 'package:carousel_slider/carousel_slider.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:property_management/characteristics/widgets/custom_tab_view.dart';
import 'package:property_management/exploitation/pages/search_exploitation_page.dart';
import 'package:property_management/objects/widgets/object_card.dart';
import 'package:property_management/objects/widgets/object_skeleton.dart';
import 'package:property_management/theme/colors.dart';
import 'package:property_management/theme/styles.dart';
import 'package:property_management/utils/utils.dart';
import 'package:property_management/widgets/box_button.dart';
import 'package:property_management/widgets/box_icon.dart';
import 'package:property_management/widgets/custom_tab_container.dart';
import 'package:property_management/widgets/expenses.dart';
import 'package:property_management/widgets/input_field.dart';
import 'package:property_management/widgets/object_carousel_card.dart';

class _SliverAppBarDelegate extends SliverPersistentHeaderDelegate {
  _SliverAppBarDelegate({
    required this.minHeight,
    required this.maxHeight,
    required this.child,
  });

  final double minHeight;
  final double maxHeight;
  final Widget child;

  @override
  double get minExtent => minHeight;

  @override
  double get maxExtent => max(maxHeight, minHeight);

  @override
  Widget build(
      BuildContext context, double shrinkOffset, bool overlapsContent) {
    return new SizedBox.expand(child: child);
  }

  @override
  bool shouldRebuild(_SliverAppBarDelegate oldDelegate) {
    return maxHeight != oldDelegate.maxHeight ||
        minHeight != oldDelegate.minHeight ||
        child != oldDelegate.child;
  }
}

class ExploitationPage extends StatefulWidget {
  const ExploitationPage({Key? key}) : super(key: key);

  @override
  State<ExploitationPage> createState() => _ExploitationPageState();
}

class _ExploitationPageState extends State<ExploitationPage> {
  bool isLoading = true;
  int currentIndexTab = 0;

  List<Map> expensesItems = [
    {'title': 'Текущая арендная плата', 'expense': ['20 000 ₽', '125 000 000 ₽', '25 000 ₽']},
    {'title': 'Обеспечительный платёж', 'expense': ['10 000 ₽', '12 000 000 ₽', '13 000 ₽']},
    {'title': 'Налоги', 'expense': ['2 300 ₽', '2 000 ₽', '25 00 ₽']},
    {'title': 'Сумма Аренды от товарооборота', 'expense': ['20 000 ₽', '20 000 ₽', '20 000 ₽']},
    {'title': 'Фактический товарооборот', 'expense': ['20 000 ₽', '20 000 ₽', '20 000 ₽']},
    {'title': 'Дополнительные доходы', 'expense': ['20 000 ₽', '20 000 ₽', '20 000 ₽']},
    {'title': 'Расходы на управление', 'expense': ['20 000 ₽', '20 000 ₽', '20 000 ₽']},
    {'title': 'Ремонтные и другие затраты', 'expense': ['20 000 ₽', '20 000 ₽', '20 000 ₽']},
    {'title': 'Комментарий к «Ремонтные и другие затраты»', 'expense': [
      'Ремонт кухни и коридора. Покраска стен, замена напольного покрытия. Натяжной потолок.',
      'Ремонт кухни и коридора. Покраска стен, замена напольного покрытия. Натяжной потолок.',
      'Ремонт кухни и коридора. Покраска стен, замена напольного покрытия. Натяжной потолок.',
    ]},
    {'title': 'Банковское обслуживание', 'expense': ['20 000 ₽', '20 000 ₽', '20 000 ₽']},
    {'title': 'Счет за электроэнергию', 'expense': ['20 000 ₽', '20 000 ₽', '20 000 ₽']},
    {'title': 'Счет за эксплуатацию (от УК МКД)', 'expense': ['20 000 ₽', '20 000 ₽', '20 000 ₽']},
    {'title': 'Счет за водоснабжение и водоотведение', 'expense': ['20 000 ₽', '20 000 ₽', '20 000 ₽']},
    {'title': 'Показания по электричеству', 'expense': ['12', '23', '232']},
    {'title': 'Счет за отопление', 'expense': ['20 000 ₽', '20 000 ₽', '20 000 ₽']},
    {'title': 'Вывоз мусора', 'expense': ['20 000 ₽', '20 000 ₽', '20 000 ₽']},
    {'title': 'Услуги связи', 'expense': ['20 000 ₽', '20 000 ₽', '20 000 ₽']},
    {'title': 'Показания по ХВС', 'expense': ['12', '232', '232']},
    {'title': 'Показания по ГВС', 'expense': ['122', '133', '323']},
    {'title': 'Показания по отоплению', 'expense': ['133', '123', '322']},
    {'title': 'Пени Арендатору за просрочку оплаты КУ', 'expense': ['200 ₽', '200 ₽', '200 ₽']},
    {'title': 'Пени Арендатору за просрочку оплаты аренды', 'expense': ['200 ₽', '200 ₽', '100 ₽']},
  ];

  @override
  void initState() {
    super.initState();
    Timer(const Duration(seconds: 4), () {
      setState(() {
        isLoading = false;
      });
    });
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: kBackgroundColor,
      body: NestedScrollView(
        headerSliverBuilder: (BuildContext context, bool innerBoxIsScrolled) {
          return <Widget>[
            SliverAppBar(
                centerTitle: true,
                elevation: 0,
                forceElevated: innerBoxIsScrolled,
                title: Row(
                  children: [
                    BoxIcon(
                      iconPath: 'assets/icons/search.svg',
                      iconColor: Colors.black,
                      backgroundColor: Colors.white,
                      onTap: () {
                        Navigator.push(
                          context,
                          PageRouteBuilder(
                            pageBuilder: (context, animation1, animation2) => SearchExploitationPage(),
                            transitionDuration: Duration.zero,
                          ),
                        );
                      },
                    ),
                    Spacer(),
                    BoxIcon(
                      iconPath: 'assets/icons/plus.svg',
                      iconColor: Colors.black,
                      backgroundColor: Colors.white,
                    ),
                    SizedBox(width: 12,),
                    BoxIcon(
                      iconPath: 'assets/icons/edit.svg',
                      iconColor: Colors.black,
                      backgroundColor: Colors.white,
                    ),
                  ],
                ),
                expandedHeight: 68,
                toolbarHeight: 68,
                collapsedHeight: 68,
                pinned: true,
                backgroundColor: kBackgroundColor,
                flexibleSpace: LayoutBuilder(builder: (BuildContext context, BoxConstraints constraints) {
                  return FlexibleSpaceBar(
                    centerTitle: constraints.biggest.height > 68 ? false : true,
                    titlePadding: EdgeInsets.all(24),
                    title: AnimatedOpacity(
                      duration: Duration(milliseconds: 300),
                      // opacity: constraints.biggest.height > 60.h ? 1.0 : 0.0,
                      opacity: 1.0,
                      child: Text('Экплуатация',
                        style: constraints.biggest.height > 68
                            ? heading1Style
                            : body,
                      ),
                    ),
                  );
                })
            ),
            SliverPersistentHeader(
              pinned: false,
              delegate: _SliverAppBarDelegate(
                minHeight: 75,
                maxHeight: 75,
                child: CarouselSlider(
                  options: CarouselOptions(
                      viewportFraction: 0.7,
                      height: 75,
                      enableInfiniteScroll: true,
                      onPageChanged: (int index, CarouselPageChangedReason reason) {
                        print(index);
                      }
                  ),
                  items: [1,2,3,4,5].map((i) {
                    return Builder(
                      builder: (BuildContext context) {
                        return ObjectCarouselCard(id: i);
                      },
                    );
                  }).toList(),
                ),
              ),
            ),
            SliverPersistentHeader(
              pinned: false,
              delegate: _SliverAppBarDelegate(
                minHeight: 24,
                maxHeight: 24,
                child: Container(),
              ),
            ),
            SliverPersistentHeader(
              pinned: false,
              delegate: _SliverAppBarDelegate(
                minHeight: 24,
                maxHeight: 24,
                child: Center(
                  child: Text(
                    'Эксплуатационные статьи',
                    style: body.copyWith(
                      color: Color(0xff5589F1),
                    ),
                  ),
                ),
              ),
            ),
          ];
        },
        body: ListView.builder(
            itemCount: expensesItems.length,
            itemBuilder: (BuildContext context, int index) {
              return Padding(
                padding: EdgeInsets.symmetric(vertical: 16, horizontal: horizontalPadding(44)),
                child: ExpensesContainer(
                  title: expensesItems[index]['title'],
                  expenses: expensesItems[index]['expense'],
                ),
              );
            }
        ),
      ),
    );
  }
}